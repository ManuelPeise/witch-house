// <auto-generated />
using System;
using Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240619194443_InitializeDatabase")]
    partial class InitializeDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Data.Shared.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CredentialGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Culture")
                        .HasColumnType("longtext");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("FamilyGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CredentialGuid");

                    b.HasIndex("FamilyGuid");

                    b.ToTable("AccountTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5846acb-2911-4831-a9ac-d2342849241d"),
                            CreatedAt = "2024-06-19",
                            CreatedBy = "System",
                            CredentialGuid = new Guid("c8eac614-9788-48b6-aa99-c755bb0d43fa"),
                            Culture = "en",
                            FirstName = "",
                            IsActive = true,
                            LastName = "",
                            UpdatedAt = "2024-06-19",
                            UpdatedBy = "System",
                            UserName = "System.Admin"
                        });
                });

            modelBuilder.Entity("Data.Shared.Entities.CredentialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EncodedPassword")
                        .HasColumnType("longtext");

                    b.Property<string>("JwtToken")
                        .HasColumnType("longtext");

                    b.Property<int>("MobilePin")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<Guid>("Salt")
                        .HasColumnType("char(36)");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CredentialsTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8eac614-9788-48b6-aa99-c755bb0d43fa"),
                            CreatedAt = "2024-06-19",
                            CreatedBy = "System",
                            EncodedPassword = "UEBzc3dvcmRkNjVmYjNiMC1mZmQ1LTQzNjQtYTAzZC1mZmM4OTRiMzBkMGI=",
                            MobilePin = 1234,
                            Salt = new Guid("d65fb3b0-ffd5-4364-a03d-ffc894b30d0b"),
                            UpdatedAt = "2024-06-19",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Data.Shared.Entities.DataSyncEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastSync")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("DataSyncTable");
                });

            modelBuilder.Entity("Data.Shared.Entities.FamilyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyFullName")
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FamilyTable");
                });

            modelBuilder.Entity("Data.Shared.Entities.LogMessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("FamilyGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Stacktrace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TimeStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MessageLogTable");
                });

            modelBuilder.Entity("Data.Shared.Entities.ModuleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ModuleSettingsType")
                        .HasColumnType("int");

                    b.Property<int>("ModuleType")
                        .HasColumnType("int");

                    b.Property<string>("SettingsJson")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountGuid");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3797d10-8723-44de-bfdc-ec4b49501f03"),
                            AccountGuid = new Guid("b5846acb-2911-4831-a9ac-d2342849241d"),
                            CreatedAt = "2024-06-19",
                            CreatedBy = "System",
                            IsActive = true,
                            ModuleName = "SchoolTraining",
                            ModuleSettingsType = 0,
                            ModuleType = 1,
                            UpdatedAt = "2024-06-19",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = new Guid("54f25e98-f1d1-45e7-80b0-4533f0ba0af0"),
                            AccountGuid = new Guid("b5846acb-2911-4831-a9ac-d2342849241d"),
                            CreatedAt = "2024-06-19",
                            CreatedBy = "System",
                            IsActive = true,
                            ModuleName = "SchoolTrainingStatistics",
                            ModuleSettingsType = 0,
                            ModuleType = 2,
                            UpdatedAt = "2024-06-19",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Data.Shared.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountGuid");

                    b.ToTable("RolesTable");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e66100cd-6f77-4ee4-b1c6-b9c8dbf205c8"),
                            AccountGuid = new Guid("b5846acb-2911-4831-a9ac-d2342849241d"),
                            CreatedAt = "2024-06-19",
                            CreatedBy = "System",
                            RoleName = "Admin",
                            RoleType = 1,
                            UpdatedAt = "2024-06-19",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Data.Shared.Entities.UnitResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Failed")
                        .HasColumnType("int");

                    b.Property<int>("Success")
                        .HasColumnType("int");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccountGuid");

                    b.ToTable("UnitResults");
                });

            modelBuilder.Entity("Data.Shared.Entities.AccountEntity", b =>
                {
                    b.HasOne("Data.Shared.Entities.CredentialEntity", "Credentials")
                        .WithMany()
                        .HasForeignKey("CredentialGuid");

                    b.HasOne("Data.Shared.Entities.FamilyEntity", "Family")
                        .WithMany("Accounts")
                        .HasForeignKey("FamilyGuid");

                    b.Navigation("Credentials");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Data.Shared.Entities.ModuleEntity", b =>
                {
                    b.HasOne("Data.Shared.Entities.AccountEntity", "Account")
                        .WithMany("Modules")
                        .HasForeignKey("AccountGuid");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Data.Shared.Entities.RoleEntity", b =>
                {
                    b.HasOne("Data.Shared.Entities.AccountEntity", "Account")
                        .WithMany("UserRoles")
                        .HasForeignKey("AccountGuid");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Data.Shared.Entities.UnitResultEntity", b =>
                {
                    b.HasOne("Data.Shared.Entities.AccountEntity", "Account")
                        .WithMany("UnitResults")
                        .HasForeignKey("AccountGuid");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Data.Shared.Entities.AccountEntity", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("UnitResults");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Data.Shared.Entities.FamilyEntity", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
